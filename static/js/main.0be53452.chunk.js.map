{"version":3,"sources":["App.js","Keypad.js","serviceWorker.js","index.js"],"names":["App","state","currentNum","updateNum","bind","val","this","result","eval","console","log","setState","e","num","evaluate","slice","className","id","type","value","React","Component","Keypad","props","name","onClick","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0be53452.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Keypad from './Keypad'\n\nclass App extends React.Component\n{\n  constructor()\n  {\n    super();\n    this.state = {\n      currentNum:''\n    };\n    this.updateNum = this.updateNum.bind(this);\n  }\n\n  evaluate() \n  {\n    try {\n    const val = this.state.currentNum;\n    // eslint-disable-next-line\n    const result = eval(val);\n    console.log(result);\n    this.setState({currentNum:result});\n  }\n  catch(e)\n  {\n    this.setState({currentNum:\"ERROR\"});\n  }\n  }\n\n  updateNum(num)\n  {   \n      console.log(\"hello\");\n      if(num===\"=\")\n      {\n          console.log(this.state.currentNum);\n          this.evaluate();\n      }\n      else if(num===\"C\")\n      {\n        console.log(this.state.currentNum);\n        this.setState({currentNum:''});\n      }\n      else if(num==\"CE\")\n      {\n        this.setState({currentNum:this.state.currentNum.slice(0,-1)});\n      }\n      else\n      {\n        const val = this.state.currentNum + num;\n        this.setState({currentNum:val});\n      }\n  }\n\n  render()\n  {\n    return (\n        <div className=\"calci\">\n          <div className=\"calci-head\">\n            <form id=\"calci-form\">\n              <input type=\"text\" value={this.state.currentNum}></input>\n            </form>\n          </div>\n          <Keypad updateNum={this.updateNum}></Keypad>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport './Keypad.css';\n\nfunction Keypad(props)\n{\n\treturn(\n\t\t<div className='keypad'>\n    \t\t<button name=\"7\" onClick={(e)=>props.updateNum(e.target.name)}>7</button>\n    \t\t<button name=\"8\" onClick={(e)=>props.updateNum(e.target.name)}>8</button>\n    \t\t<button name=\"9\" onClick={(e)=>props.updateNum(e.target.name)}>9</button>\n    \t\t<button className='op' name=\"*\" onClick={(e)=>props.updateNum(e.target.name)}>x</button>\n\n    \t\t<button name=\"4\" onClick={(e)=>props.updateNum(e.target.name)}>4</button>\n    \t\t<button name=\"5\" onClick={(e)=>props.updateNum(e.target.name)}>5</button>\n    \t\t<button name=\"6\" onClick={(e)=>props.updateNum(e.target.name)}>6</button>\n    \t\t<button className='op' name=\"-\" onClick={(e)=>props.updateNum(e.target.name)}>-</button>\n\n    \t\t<button name=\"1\" onClick={(e)=>props.updateNum(e.target.name)}>1</button>\n    \t\t<button name=\"2\" onClick={(e)=>props.updateNum(e.target.name)}>2</button>\n    \t\t<button name=\"3\" onClick={(e)=>props.updateNum(e.target.name)}>3</button>\n    \t\t<button className='op' name=\"+\" onClick={(e)=>props.updateNum(e.target.name)}>+</button>\n\n    \t\t<button name=\"0\" onClick={(e)=>props.updateNum(e.target.name)}>0</button>\n    \t\t<button name=\".\" onClick={(e)=>props.updateNum(e.target.name)}>.</button>\n    \t\t<button name=\"=\" onClick={(e)=>props.updateNum(e.target.name)}>=</button>\n    \t\t<button className='op' name=\"/\" onClick={(e)=>props.updateNum(e.target.name)}>/</button>\n\n    \t\t<button id=\"clear\" name=\"C\" onClick={(e)=>props.updateNum(e.target.name)}>C</button>\n    \t\t<button id=\"clear\" name=\"CE\" onClick={(e)=>props.updateNum(e.target.name)}>CE</button>\n\n        </div>\n\t\t)\n}\n\nexport default Keypad;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}